// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: oyster/rpc/payment/v1/process_payment_rpc.proto

package paymentv1

import (
	context "context"
	v1 "github.com/yaydoo/proto.boilerplate/go/oyster/entities/pb/payment/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessPaymentServiceClient is the client API for ProcessPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessPaymentServiceClient interface {
	MakePayment(ctx context.Context, in *v1.MakePaymentRequest, opts ...grpc.CallOption) (*v1.MakePaymentResponse, error)
}

type processPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessPaymentServiceClient(cc grpc.ClientConnInterface) ProcessPaymentServiceClient {
	return &processPaymentServiceClient{cc}
}

func (c *processPaymentServiceClient) MakePayment(ctx context.Context, in *v1.MakePaymentRequest, opts ...grpc.CallOption) (*v1.MakePaymentResponse, error) {
	out := new(v1.MakePaymentResponse)
	err := c.cc.Invoke(ctx, "/oyster.rpc.payment.v1.ProcessPaymentService/MakePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessPaymentServiceServer is the server API for ProcessPaymentService service.
// All implementations should embed UnimplementedProcessPaymentServiceServer
// for forward compatibility
type ProcessPaymentServiceServer interface {
	MakePayment(context.Context, *v1.MakePaymentRequest) (*v1.MakePaymentResponse, error)
}

// UnimplementedProcessPaymentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProcessPaymentServiceServer struct {
}

func (UnimplementedProcessPaymentServiceServer) MakePayment(context.Context, *v1.MakePaymentRequest) (*v1.MakePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePayment not implemented")
}

// UnsafeProcessPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessPaymentServiceServer will
// result in compilation errors.
type UnsafeProcessPaymentServiceServer interface {
	mustEmbedUnimplementedProcessPaymentServiceServer()
}

func RegisterProcessPaymentServiceServer(s grpc.ServiceRegistrar, srv ProcessPaymentServiceServer) {
	s.RegisterService(&ProcessPaymentService_ServiceDesc, srv)
}

func _ProcessPaymentService_MakePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MakePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessPaymentServiceServer).MakePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oyster.rpc.payment.v1.ProcessPaymentService/MakePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessPaymentServiceServer).MakePayment(ctx, req.(*v1.MakePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessPaymentService_ServiceDesc is the grpc.ServiceDesc for ProcessPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oyster.rpc.payment.v1.ProcessPaymentService",
	HandlerType: (*ProcessPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakePayment",
			Handler:    _ProcessPaymentService_MakePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oyster/rpc/payment/v1/process_payment_rpc.proto",
}
